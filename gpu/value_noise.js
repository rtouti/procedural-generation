let fragment_shader_src = [
	"precision highp float;",
	"",
	"float rand2d(float x, float y){",
    "	return fract(sin(dot(vec2(x, y) ,vec2(12.9898, 78.233))) * 43758.5453);",
	"}",
	"",
	"float rand3d(float x, float y, float z){",
    "	return fract(sin(dot(vec3(x, y, z) ,vec3(12.9898, 78.233, 54.734))) * 43758.5453);",
	"}",
	"",
	"float fade(float t){",
	"	return t*t*(3.0-2.0*t);",
	"}",
	"",
	"float noise2d(float x, float y){",
	"	float xf = fade(fract(x));",
	"	float yf = fade(fract(y));",
	"	float xi = floor(x);",
	"	float yi = floor(y);",
	"",
	"	return mix(",
	"			mix(rand2d(xi, yi), rand2d(xi+1.0, yi), xf),",
	"			mix(rand2d(xi, yi+1.0), rand2d(xi+1.0, yi+1.0), xf),",
	"			yf",
	"	);",
	"}",
	"",
	"float noise3d(float x, float y, float z){",
	"	float xf = fade(fract(x));",
	"	float yf = fade(fract(y));",
	"	float zf = fade(fract(z));",
	"	float xi = floor(x);",
	"	float yi = floor(y);",
	"	float zi = floor(z);",
	"",
	"	return mix(",
	"		mix(",
	"			mix(rand3d(xi, yi, zi), rand3d(xi+1.0, yi, zi), xf),",
	"			mix(rand3d(xi, yi+1.0, zi), rand3d(xi+1.0, yi+1.0, zi), xf),",
	"			yf",
	"		),",
	"		mix(",
	"			mix(rand3d(xi, yi, zi+1.0), rand3d(xi+1.0, yi, zi+1.0), xf),",
	"			mix(rand3d(xi, yi+1.0, zi+1.0), rand3d(xi+1.0, yi+1.0, zi+1.0), xf),",
	"			yf",
	"		),",
	"		zf",
	"	);",
	"}",
	""
];

fragment_shader_src = fragment_shader_src.join("\n");